package com.xjt.algorithm;

/**
 * 买卖股票的最佳时机 II
 * 
 * @author kevin
 * @date 2021/4/4
 */
public class MaxProfitII {

    /**
     * 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
     *
     * 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
     *
     * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
     *
     * 示例 1:
     *
     * 输入: [7,1,5,3,6,4] 输出: 7
     *
     * 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     *
     *   随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
     *
     */

    /**
     * 思路：
     *
     * 1、动态规划：考虑到「不能同时参与多笔交易」，因此每天交易结束后只可能存在手里有一支股票或者没有股票的状态。
     *
     * 定义状态 {dp}[i][0] 表示第 i 天交易完后手里没有股票的最大利润，dp[i][1] 表示第 i 天交易完后手里持有一支股票的最大利润（i 从 0 开始）。
     *
     * 考虑 {dp}[i][0] 的转移方程，如果这一天交易完后手里没有股票，那么可能的转移状态为前一天已经没有股票，即
     *
     * {dp}[i-1][0]，或者前一天结束的时候手里持有一支股票，即 {dp}[i-1][1]，这时候我们要将其卖出，并获得
     *
     * {prices}[i] 的收益。因此为了收益最大化，我们列出如下的转移方程：dp[i][0]=max{dp[i−1][0],dp[i−1][1]+prices[i]}
     *
     * 再来考虑 {dp}[i][1]，按照同样的方式考虑转移状态，那么可能的转移状态为前一天已经持有一支股票，
     *
     * 即 {dp}[i-1][1]，或者前一天结束时还没有股票，即 {dp}[i-1][0]，这时候我们要将其买入，并减少 {prices}[i] 的收益。
     *
     * 可以列出如下的转移方程：dp[i][1]=max{dp[i−1][1],dp[i−1][0]−prices[i]}
     *
     * 将 dp[i−1][0] 和 dp[i−1][1] 存放在两个变量中，通过它们计算出 dp[i][0] 和 dp[i][1] 并存回对应的变量，以便于第 i+1 天的状态转移即可
     *
     * 时间复杂度：O(n)、空间复杂度：O(1)
     * 
     * @param prices
     * @return
     */
    public int maxProfit(int[] prices) {
        int n = prices.length;
        // n小于2，股票只能持有一天，卖不出去，所以没有利润
        if (n < 2) {
            return 0;
        }
        // dp0表示卖出股票的最大利润，dp1表示持有股票的最大利润
        int dp0 = 0, dp1 = -prices[0];
        for (int i = 0; i < n; i++) {
            int newDp0 = Math.max(dp0, dp1 + prices[i]);
            int newDp1 = Math.max(dp1, dp0 - prices[i]);
            dp0 = newDp0;
            dp1 = newDp1;
        }
        return dp0;
    }

    /**
     * 2、贪心算法：只算当前局部最优解，对于 「今天的股价 - 昨天的股价」，得到的结果有 3 种可能：
     *
     * ① 正数，② 0，③负数。贪心算法的决策是： 只加正数 。
     *
     * 时间复杂度：O(N)，这里 N 表示股价数组的长度；空间复杂度：O(1)
     * 
     * @param prices
     * @return
     */
    public int maxProfit2(int[] prices) {
        int n = prices.length;
        if (n < 2) {
            return 0;
        }
        int res = prices[0];
        for (int i = 1; i < n; i++) {
            if (prices[i] - prices[i - 1] > 0) {
                res += prices[i] - prices[i - 1];
            }
        }
        return res;
    }

}
